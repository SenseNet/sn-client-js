{"version":3,"sources":["src_commands/utils/ask.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAAiC;AACjC,yCAA0G;AAK1G;IAOW,MAAM,CAAO,SAAS,CAAC,QAAgB;;YAC1C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;KAAA;IAOM,MAAM,CAAO,aAAa,CAAC,QAAgB;;YAC9C,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC;KAAA;IAQO,MAAM,CAAO,GAAG,CAAC,QAAgB,EAAE,OAAgB,KAAK;;YAC5D,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;gBACvC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;oBACP;wBACI,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;qBACf;iBACJ,EAAE,CAAC,GAAG,EAAE,GAAG;oBACR,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEM,MAAM,CAAO,cAAc,CAAgC,GAAG,cAAmB;;YACpF,MAAM,CAAC,IAAI,OAAO,CAAyB,CAAC,OAAO,EAAE,MAAM;gBACvD,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,IAAI,OAAO,GAAI,cAAc,CAAC,GAAG,CAAC,SAAS;oBACvC,IAAI,GAAG,GAAG,kCAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oBACjD,MAAM,CAAC;wBACH,IAAI,EAAE,GAAG,CAAC,SAAS;wBACnB,WAAW,EAAE,GAAG,CAAC,QAAQ;wBACzB,MAAM,EAAE,GAAG,CAAC,QAAQ,GAAG,2BAAgB,CAAC,gBAAgB;qBAC3D,CAAA;gBACL,CAAC,CAAC,CAAA;gBACF,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG;oBACzB,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;CACJ;AAzDD,kBAyDC","file":"src_commands/utils/ask.js","sourcesContent":["import * as Prompt from 'prompt';\r\nimport { SnConfigFieldModel, SnConfigBehavior, SnConfigModel, SnConfigFieldModelStore } from './snconfig';\r\n\r\n/**\r\n * This class is a wrapper for command-line data input in Node.Js console applications\r\n */\r\nexport class Ask {\r\n\r\n    /**\r\n     * Prompts a question to the console and awaits a text input. The typings will be displayed as a plain text.\r\n     * @param question {string} A question to be asked before reading the data\r\n     * @returns {Promise<string>} A promise that will be resolved when the user press ENTER key\r\n     */\r\n    public static async TextAsync(question: string): Promise<string> {\r\n        return Ask.Ask(question);\r\n    }\r\n\r\n    /**\r\n     * Prompts a question to the console and awaits a text input. The typing won't be displayed in the console.\r\n     * @param question {string} A question to be asked before reading the data\r\n     * @returns {Promise<string>} A promise that will be resolved when the user press ENTER key\r\n     */\r\n    public static async PasswordAsync(question: string): Promise<string> {\r\n        return Ask.Ask(question, true);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param question The string that will be displayed before the user input\r\n     * @param hide {boolean} Indicates if the user input needs to be hidden\r\n     */\r\n    private static async Ask(question: string, hide: boolean = false): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            Prompt.start();\r\n            Prompt.get([\r\n                {\r\n                    name: question,\r\n                    required: true,\r\n                    hidden: hide\r\n                }\r\n            ], (err, res) => {\r\n                resolve(res[question]);\r\n            })\r\n        });\r\n    }\r\n\r\n    public static async MissingConfigs<K extends keyof SnConfigModel>(...missingConfigs: K[]): Promise<Partial<SnConfigModel>> {\r\n        return new Promise<Partial<SnConfigModel>>((resolve, reject) => {\r\n            Prompt.start();\r\n            let configs =  missingConfigs.map(fieldName => {\r\n                let cfg = SnConfigFieldModelStore.Get(fieldName);\r\n                return {\r\n                    name: cfg.FieldName,\r\n                    description: cfg.Question,   // ??\r\n                    hidden: cfg.Behavior | SnConfigBehavior.HideConsoleInput\r\n                }\r\n            })\r\n            Prompt.get(configs, (err, res) => {\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n}"],"sourceRoot":"/source/"}