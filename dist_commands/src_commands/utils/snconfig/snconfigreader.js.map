{"version":3,"sources":["src_commands/utils/snconfig/snconfigreader.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yBAA8E;AAC9E,0BAA0B;AAC1B,6BAA6B;AAG7B,MAAM,cAAc,GAAG,cAAc,CAAC;AAKtC;IAQI,YAAoB,gBAAwB;QAAxB,qBAAgB,GAAhB,gBAAgB,CAAQ;QANpC,WAAM,GAAkB,IAAI,gBAAa,CAAC;IAMF,CAAC;IAMnC,cAAc;;YACxB,IAAI,GAAkB,CAAC;YACvB,IAAI,CAAC;gBACD,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,CAAC;YACrE,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,OAAO,cAAc,mCAAmC,CAAC,CAAC;gBACtE,GAAG,GAAG,IAAI,gBAAa,EAAE,CAAC;YAC9B,CAAC;YACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;KAAA;IAOY,aAAa,CAAgC,GAAG,cAAmB;;YAC5E,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,GAAG,CAAC,CAAC,IAAI,SAAS,IAAI,cAAc,CAAC,CAAC,CAAC;gBACnC,IAAI,UAAU,GAAG,0BAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACxD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAE9C,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,GAAG,mBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBACvF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC;wBAC7B,CAAC,UAAU,CAAC,QAAQ,GAAG,mBAAgB,CAAC,gBAAgB,CAAC;;gCAErD,MAAM,MAAG,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC;4BAC5C,MAAM,MAAG,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBACrD,CAAC;YACL,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;KAAA;CACJ;AA/CD,wCA+CC","file":"src_commands/utils/snconfig/snconfigreader.js","sourcesContent":["import { SnConfigModel, SnConfigFieldModelStore, SnConfigBehavior } from './';\r\nimport { Ask } from '../';\r\nimport * as Path from 'path';\r\n\r\n\r\nconst SN_CONFIG_NAME = 'sn.config.js';\r\n\r\n/**\r\n * This class reads, verifies and extends a configuration file from the specified project directory.\r\n */\r\nexport class SnConfigReader {\r\n\r\n    private config: SnConfigModel = new SnConfigModel;\r\n\r\n    /**\r\n     * @constructs SnConfigReader\r\n     * @param projectDirectory {string} The directory to look sn.config.js for\r\n     */\r\n    constructor(private projectDirectory: string) { }\r\n\r\n    /**\r\n     * Reads an sn.config.js file from the project directory, warns the user if there is no sn.config.js available\r\n     * @returns {Promise<any>} An awaitable promise that will be resolved when the reading is completed or the new Config model is constructed.\r\n     */\r\n    private async ReadConfigFile(): Promise<any> {\r\n        let cfg: SnConfigModel;\r\n        try {\r\n            cfg = require(this.projectDirectory + Path.sep + SN_CONFIG_NAME);\r\n        } catch (error) {\r\n            console.log(`No '${SN_CONFIG_NAME}' file found in the project root.`);\r\n            cfg = new SnConfigModel();\r\n        }\r\n        this.config = cfg;\r\n    }\r\n\r\n    /**\r\n     * Validates a specified option set and asks the user if there are some missing option values\r\n     * @param requiredValues The config fields to be provided and to be asked for\r\n     * @returns {Promise<Readonly<SnConfigModel>>} An awaitable promise with the readonly SnAdminConfigModel that will contain all specified values\r\n     */\r\n    public async ValidateAsync<K extends keyof SnConfigModel>(...requiredValues: K[]): Promise<Readonly<SnConfigModel>> {\r\n        await this.ReadConfigFile();\r\n        for (let fieldName of requiredValues) {\r\n            let fieldModel = SnConfigFieldModelStore.Get(fieldName);\r\n            let value = this.config[fieldModel.FieldName];\r\n\r\n            if (!value || !value.length || !(fieldModel.Behavior & SnConfigBehavior.AllowFromConfig)) {\r\n                this.config[fieldModel.FieldName] =\r\n                    (fieldModel.Behavior & SnConfigBehavior.HideConsoleInput)\r\n                        ?\r\n                        await Ask.PasswordAsync(fieldModel.Question) :\r\n                        await Ask.TextAsync(fieldModel.Question);\r\n            }\r\n        }\r\n\r\n        return this.config;\r\n    }\r\n}"],"sourceRoot":"/source/"}