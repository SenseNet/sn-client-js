{"version":3,"sources":["src_commands/utils/snconfig/snconfigfieldmodelstore.ts"],"names":[],"mappings":";;AAKA;IAaW,MAAM,CAAC,GAAG,CAAC,QAA4B;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,SAAS,QAAQ,CAAC,SAAS,gDAAgD,CAAC,CAAA;QAChG,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;IAC/C,CAAC;IAOM,MAAM,CAAC,GAAG,CAAC,SAAiB;QAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,uCAAuC,SAAS,GAAG,CAAC,CAAC;QACzE,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAOM,MAAM,CAAC,QAAQ,CAAC,SAAiB;QACpC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC;IAC/B,CAAC;;AApCc,8BAAM,GAAyB,EAAE,CAAC;AALrD,0DA0CC","file":"src_commands/utils/snconfig/snconfigfieldmodelstore.js","sourcesContent":["import { SnConfigFieldModel } from './';\r\n\r\n/**\r\n * Class that stores the model data for the SnConfigModel's fields, filled by the SnConfigField decorator\r\n */\r\nexport class SnConfigFieldModelStore {\r\n\r\n    /**\r\n     * An array that contains the field definitions\r\n     */\r\n    private static _store: SnConfigFieldModel[] = [];\r\n\r\n\r\n    /**\r\n     * Adds a new model to the store\r\n     * @param newModel {SnConfigFieldModel} The field model to be added\r\n     * @throws error {Error} if a field with the same name already exists\r\n     */\r\n    public static Add(newModel: SnConfigFieldModel) {\r\n        if (this.Contains(newModel.FieldName)) {\r\n            throw new Error(`Field ${newModel.FieldName} for configuration model already in the store!`)\r\n        }\r\n        this._store[newModel.FieldName] = newModel;\r\n    }\r\n\r\n    /**\r\n     * Returns an entry for the specified field\r\n     * @param fieldName {string} The field's name to search for\r\n     * @throws error {error} if the store doesn't contain entry for the field.\r\n     */\r\n    public static Get(fieldName: string): SnConfigFieldModel {\r\n        let found = this._store[fieldName];\r\n        if (!found) {\r\n            throw new Error(`No entry found with the field name '${fieldName}'`);\r\n        }\r\n        return this._store[fieldName];\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if the store contains value with the specified field\r\n     * @param fieldName fieldName {string} The field's name to search for\r\n     */\r\n    public static Contains(fieldName: string): boolean {\r\n        let found = this._store[fieldName];\r\n        return found !== undefined;\r\n    }\r\n}"],"sourceRoot":"/source/"}