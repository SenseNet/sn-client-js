{"version":3,"sources":["src_commands/utils/stage.ts"],"names":[],"mappings":";;;;;;;;;;AACA,6BAA6B;AAI7B,8BAA8B;AAC9B,4CAA4C;AAC5C,6BAA6B;AAE7B,8CAA8C;AAC9C,sCAAsC;AAEtC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC;AAChD,MAAM,kBAAkB,GAAG,GAAG,kBAAkB,SAAS,CAAC;AAC1D,MAAM,kBAAkB,GAAG,GAAG,kBAAkB,SAAS,CAAC;AAC1D,MAAM,gBAAgB,GAAG,GAAG,kBAAkB,OAAO,CAAC;AACtD,MAAM,oBAAoB,GAAG,GAAG,kBAAkB,WAAW,CAAC;AAE9D,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAE/B,MAAM,UAAU,GAAG,SAAS,CAAC;AAE7B;IAEI,YAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QACjC,SAAS,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IACD,IAAW,cAAc;QACrB,MAAM,CAAC,gBAAgB,CAAC;IAC5B,CAAC;IAED,IAAW,cAAc;QACrB,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,GAAG,gBAAgB,EAAE,CAAC;IACtE,CAAC;IAEY,YAAY;;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,IAAI,CAAC,GAAG,CAAC;gBACX,eAAe;gBACf,gBAAgB;gBAChB,gBAAgB;gBAChB,iBAAiB;aACpB,EAAE;gBACK,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;gBAC7B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;aAC/B,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBACpC,MAAM,EAAE,CAAC;QAClB,CAAC;KAAA;IAEY,YAAY;;YACrB,IAAI,CAAC;gBAED,IAAI,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;gBAEtF,MAAM,IAAI,CAAC,GAAG,CAAC;oBACX,mBAAmB;oBACnB,oBAAoB;iBACvB,EAAE;oBACK,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;oBAC7B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;iBAC/B,CAAC;qBACD,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;qBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpC,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;gBACrC,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACL,CAAC;KAAA;IAEM,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACtD,CAAC;CACJ;AArDD,sBAqDC","file":"src_commands/utils/stage.js","sourcesContent":["import { PathHelper } from './';\r\nimport * as Gulp from 'gulp';\r\nimport * as GulpTypescript from 'gulp-typescript';\r\nimport * as GulpMocha from 'gulp-mocha';\r\nimport * as GulpSourceMaps from 'gulp-sourcemaps';\r\nimport * as Delete from 'del';\r\nimport * as Promisify from 'gulp-promisify';\r\nimport * as Path from 'path';\r\n\r\nimport * as sourcemaps from 'gulp-sourcemaps';\r\nimport * as ts from 'gulp-typescript';\r\n\r\nconst STAGE_TASKS_PREFIX = 'SN_COMMANDS_STAGE_';\r\nconst STAGE_TASK_CLEANUP = `${STAGE_TASKS_PREFIX}CLEANUP`;\r\nconst STAGE_TASK_PREPARE = `${STAGE_TASKS_PREFIX}PREPARE`;\r\nconst STAGE_TASK_BUILD = `${STAGE_TASKS_PREFIX}BUILD`;\r\nconst STAGE_TASK_FINIALIZE = `${STAGE_TASKS_PREFIX}FINIALIZE`;\r\n\r\nconst TEMP_FOLDER_NAME = 'tmp';\r\n\r\nconst currentDir = __dirname;\r\n\r\nexport class Stage {\r\n\r\n    constructor(private paths: PathHelper) {\r\n        Promisify(Gulp);\r\n    }\r\n    public get TempFolderName(): string {\r\n        return TEMP_FOLDER_NAME;\r\n    }\r\n\r\n    public get TempFolderPath(): string {\r\n        return `${this.paths.SnClientPath}${Path.sep}${TEMP_FOLDER_NAME}`;\r\n    }\r\n\r\n    public async PrepareAsync() {\r\n        this.Cleanup();\r\n        await Gulp.src([\r\n            `./src/**/*.ts`,\r\n            `./test/**/*.ts`,\r\n            `!./src/SN.d.ts`,\r\n            `./tsconfig.json`\r\n        ], {\r\n                base: this.paths.SnClientPath,\r\n                cwd: this.paths.SnClientPath,\r\n            })\r\n            .pipe(Gulp.dest(this.TempFolderPath))\r\n            .resume();\r\n    }\r\n\r\n    public async CompileAsync() {\r\n        try {\r\n\r\n            let tsProject = ts.createProject(Path.join(this.paths.SnClientPath, 'tsconfig.json'));\r\n\r\n            await Gulp.src([\r\n                './tmp/src/**/*.ts',\r\n                './tmp/test/**/*.ts'\r\n            ], {\r\n                    base: this.paths.SnClientPath,\r\n                    cwd: this.paths.SnClientPath\r\n                })\r\n                .pipe(sourcemaps.init())\r\n                .pipe(tsProject())\r\n                .pipe(sourcemaps.write('.'))\r\n                .pipe(Gulp.dest('./dist2'));\r\n        } catch (error) {\r\n            console.log('Failed to build types');\r\n            this.Cleanup();\r\n        }\r\n    }\r\n\r\n    public Cleanup() {\r\n        Delete.sync(this.TempFolderPath, { force: true });\r\n    }\r\n}"],"sourceRoot":"/source/"}