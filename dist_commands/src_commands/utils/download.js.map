{"version":3,"sources":["src_commands/utils/download.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAK7B;IAOI,YAAoB,IAAY,EAAU,IAAY;QAAlC,SAAI,GAAJ,IAAI,CAAQ;QAAU,SAAI,GAAJ,IAAI,CAAQ;QAM9C,YAAO,GAAQ,EAAE,CAAC;IAL1B,CAAC;IAYM,YAAY,CAAC,QAAgB,EAAE,QAAgB;QAClD,IAAI,IAAI,GAAG,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG,QAAQ,IAAI,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/E,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAMM,gBAAgB;QACnB,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;YACvC,IAAI,CAAC,GAAG,CAAC;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,OAAO,EAAE,IAAI,CAAC,OAAO;aACxB,EAAE,CAAC,QAA8B;gBAC9B,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,GAAG,EAAE,CAAC;oBACd,IAAI,aAAa,GAAW,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACzE,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK;wBACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACrB,CAAC,CAAC,CAAA;oBAEF,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE;wBACf,IAAI,GAAG,GAAG,CAAC,CAAC;wBACZ,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC;wBACvC,IAAI,CAAC,OAAO,CAAC,KAAK;4BACd,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;4BACxB,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC;wBACxB,CAAC,CAAC,CAAC;wBACH,OAAO,CAAC,MAAM,CAAC,CAAC;oBACpB,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,MAAM,EAAE,CAAC;gBACb,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AA5DD,4BA4DC","file":"src_commands/utils/download.js","sourcesContent":["import * as Http from 'http';\r\n\r\n/**\r\n * This class represents a Download from a specified Sense/Net Repository\r\n */\r\nexport class Download {\r\n\r\n    /**\r\n     * @constructs Download\r\n     * @param host {string} The hostname for the specified Sense/Net repository\r\n     * @param path {string} The path to the download\r\n     */\r\n    constructor(private host: string, private path: string) {\r\n    }\r\n\r\n    /**\r\n     * The request headers to be send\r\n     */\r\n    private headers: any = {};\r\n\r\n    /**\r\n     * Sets up the Basic Authentication headers\r\n     * @param username {string} The username for the authentication\r\n     * @param password {string} The password for the authentication\r\n     */\r\n    public Authenticate(username: string, password: string): Download {\r\n        let auth = 'Basic ' + new Buffer(`${username}:${password}`).toString('base64');\r\n        this.headers['Authorization'] = auth;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Executes the download request, flatterns the data into a simple in-memory buffer\r\n     * @returns {Promise<Buffer>} An awaitable promise with the in-memory buffer\r\n     */\r\n    public GetAsBufferAsync(): Promise<Buffer> {\r\n        return new Promise<Buffer>((resolve, reject) => {\r\n            Http.get({\r\n                host: this.host,\r\n                path: this.path,\r\n                headers: this.headers,\r\n            }, (response: Http.IncomingMessage) => {\r\n                if (response.readable) {\r\n                    let data = [];\r\n                    let contentLength: number = parseInt(response.headers['content-length']);\r\n                    response.on('data', chunk => {\r\n                        data.push(chunk);\r\n                    })\r\n\r\n                    response.on('end', () => {\r\n                        let pos = 0;\r\n                        let buffer = new Buffer(contentLength);\r\n                        data.forEach(chunk => {\r\n                            chunk.copy(buffer, pos);\r\n                            pos += chunk.length;\r\n                        });\r\n                        resolve(buffer);\r\n                    });\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}"],"sourceRoot":"/source/"}