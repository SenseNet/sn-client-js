{"version":3,"sources":["src_commands/sn-fetch-types.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,+CAAkD;AAClD,mCAAsD;AAEtD,kCAAkC;AAClC,6BAA6B;AAO7B,MAAM,yBAAyB,GAAG,kDAAkD,CAAC;AAErF,CAAC;IAEG,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAC1C,IAAI,UAAU,GAAG,IAAI,kBAAU,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAA;IAE3E,IAAI,KAAK,GAAG,IAAI,aAAK,CAAC,UAAU,CAAC,CAAC;IAClC,MAAM,KAAK,CAAC,YAAY,EAAE,CAAC;IAE3B,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IACxC,IAAI,GAAG,GAAG,MAAM,IAAI,yBAAc,CAAC,UAAU,CAAC,eAAe,CAAC;SACzD,aAAa,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IAE5D,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;IAE/C,IAAI,SAAS,GAAG,MAAM,IAAI,gBAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,yBAAyB,CAAC;SAC3E,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC;SACxC,gBAAgB,EAAE,CAAC;IAExB,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC;IAChC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;IAEjD,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC;IAChE,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;IAEjD,MAAM,KAAK,CAAC,YAAY,EAAE,CAAC;IAE3B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAEzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAA,CAAC,EAAE,CAAA","file":"src_commands/sn-fetch-types.js","sourcesContent":["import { SnConfigReader } from './utils/snconfig';\r\nimport { Download, Stage, PathHelper } from './utils';\r\nimport { NpmExecutor } from './utils/npmexecutor';\r\nimport * as AdmZip from 'adm-zip';\r\nimport * as Path from 'path';\r\n\r\n\r\n/**\r\n * Executeable node.js file for fetching / updating pre-generated Typescript proxy classes from a Sense/Net Content Repository\r\n */\r\n\r\nconst SN_REPOSITORY_URL_POSTFIX = '/Root/System/Schema/Metadata/TypeScript/meta.zip';\r\n\r\n(async () => {\r\n\r\n    console.log('Sn-Fetch-Types starting...');\r\n    let pathHelper = new PathHelper(process.cwd(), `${__dirname}${Path.sep}..`)\r\n\r\n    let stage = new Stage(pathHelper);\r\n    await stage.PrepareAsync();\r\n\r\n    console.log('Checking sn.config.js...');\r\n    let cfg = await new SnConfigReader(pathHelper.PackageRootPath)\r\n        .ValidateAsync('RepositoryUrl', 'UserName', 'Password');\r\n\r\n    console.log('Downloading type definitions...');\r\n\r\n    let zipBuffer = await new Download(cfg.RepositoryUrl, SN_REPOSITORY_URL_POSTFIX)\r\n        .Authenticate(cfg.UserName, cfg.Password)\r\n        .GetAsBufferAsync();\r\n\r\n    let zip = new AdmZip(zipBuffer);\r\n    console.log('Download completed, extracting...');\r\n\r\n    zip.extractAllTo(stage.TempFolderPath + Path.sep + 'src', true);\r\n    console.log('Files extracted, running Build...');\r\n\r\n    await stage.CompileAsync();\r\n\r\n    console.log('All done.');\r\n\r\n    process.exit(0);\r\n})()"],"sourceRoot":"/source/"}