/**
 * @module Content
 * @preferred
 *
 * @description Top level base type of sense NET's Type hierarchy. Content has the basic properties and functionality that can be reached on all of the inherited types. It's almost the same as an abstract class, it may not be instantiated directly,
 * but it has the basic methods implemented that can be called on obejcts with derived types. Unlike other Content Types it is not autogenerated.
 * Content has the basic properties and functionality that can be reached on all of the inherited types. It's almost the same as an abstract class, it may not be instantiated directly,
 * but it has the basic methods implemented that can be called on obejcts with derived types.
 * <p data-height="314" data-theme-id="light" data-slug-hash="QqgvKL" data-default-tab="result" data-user="gallayl" data-embed-version="2" data-pen-title="@sensenet/sn-client-js/content" class="codepen">See the Pen <a href="https://codepen.io/gallayl/pen/QqgvKL/">@sensenet/sn-client-js/content</a> by gallayl (<a href="https://codepen.io/gallayl">@gallayl</a>) on <a href="https://codepen.io">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>
 *
 * Unlike other Content Types it is not autogenerated.
 *
 * Actions
 * ------------------
 *
 * Built-in SenseNet Actions on client-side are methods on the Content object. If you want to use them you have to have a Content which can be made with the Create method that can convert your js Object or JSON
 * with the proper parameters to a Content with the given type.
 * ```
 * var content = Content.Create('Folder', {DisplayName: 'My folder'});
 * ```
 * On a Content object the Actions can be called like this way (check below sections for further information about the Actions and their params):
 * ```
 * let contentDelete = content.Delete(false);
 * ```
 * This function returns an Observable so that you can subscribe to it in your code. This way you can work with the response easier defining the three functions of a subscribtion and
 * using all the super helpful and usable features like filtering, combining, caching, etc.
 * ```
 * contentDelete.subscribe({
 *  .map(response => response.d) //map and use the reponse's 'd' object as the response
 *  .subscribe({
 *      next: response => console.log(response), //if the request was successful
 *      error: error => console.error('something wrong occurred: ' + error), //if the request failed
 *      complete: () => console.log('done'), //if the request is done
 *  })
 * });
 * ```
 * Using RxJS you are able to merge, zip or combine multiple Observables, this way you can develope various combinations of Actions with custom functionality.
 *
 * Read more about RxJS [here](http://reactivex.io/rxjs)
 *
 * And about Reactive Programming [here](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) it could be helpful not only with ajax request but also with event handling or anything else
 * related to async data streams.
 */ /** */

export * from './IContent';
export * from './ISavedContent';
export * from './ContentInternal';
export * from './Types';
