{"version":3,"sources":["bin/sn-fetch-types.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,iCAAiC;AAGjC;CAIC;AAED,MAAM,sBAAsB,GAAG,iDAAiD,CAAA;AAEhF;IAEY,MAAM,CAAO,cAAc;;YAC/B,IAAI,GAAa,CAAC;YAElB,IAAI,CAAC;gBACD,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,CAAC;YACnD,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YACpE,CAAC;YACD,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;KAAA;IAEO,MAAM,CAAO,GAAG,CAAC,QAAgB,EAAE,OAAgB,KAAK;;YAC5D,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;gBACvC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;oBACP;wBACI,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE,IAAI;qBACf;iBACJ,EAAE,CAAC,GAAG,EAAE,GAAG;oBACR,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEM,MAAM,CAAO,MAAM;;YACtB,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YACtC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrB,GAAG,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,uFAAuF,CAAC,CAAC;YAChI,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,GAAG,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YACvE,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,GAAG,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAAC;YAC7E,CAAC;YAED,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;KAAA;CACJ;AAED,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAE1C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAExB,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,EAAE,CAAC,CAAC;AACxD,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAKtC,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG;IAC9B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","file":"bin/sn-fetch-types.js","sourcesContent":["import * as Path from 'path';\r\nimport * as Prompt from 'prompt';\r\nimport * as FileSystem from 'fs';\r\n\r\nclass SnConfig {\r\n    RepositoryUrl: string;\r\n    UserName?: string;\r\n    Password?: string;\r\n}\r\n\r\nconst REPOSITORY_URL_POSTFIX = 'Root/System/Schema/Metadata/TypeScript/meta.zip'\r\n\r\nclass Config {\r\n\r\n    private static async ReadConfigFile(): Promise<SnConfig> {\r\n        let cfg: SnConfig;\r\n\r\n        try {\r\n            cfg = require(cwd + Path.sep + 'sn.config.js');\r\n        } catch (error) {\r\n            console.log('There was an error opening sn.config.js: ', error);\r\n        }\r\n        return cfg;\r\n    }\r\n\r\n    private static async Ask(question: string, hide: boolean = false): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            Prompt.start();\r\n            Prompt.get([\r\n                {\r\n                    name: question,\r\n                    required: true,\r\n                    hidden: hide\r\n                }\r\n            ], (err, res) => {\r\n                resolve(res[question]);\r\n            })\r\n        });\r\n    }\r\n\r\n    public static async Create(): Promise<SnConfig> {\r\n        let cfg = await this.ReadConfigFile();\r\n        if (!cfg.RepositoryUrl) {\r\n            cfg.RepositoryUrl = await this.Ask('Please enter your Sense/Net Site URL(e.g.: http://www.my-awesome-sensenet-portal.net/');\r\n        }\r\n        if (!cfg.UserName) {\r\n            cfg.UserName = await this.Ask('Please enter the admin username: ');\r\n        }\r\n        if (!cfg.Password) {\r\n            cfg.Password = await this.Ask('Please enter the admin password: ', true);\r\n        }\r\n\r\n        return cfg;\r\n    }\r\n}\r\n\r\nconsole.log('Sn-Fetch-Types starting...');\r\n\r\nlet path = Path.parse(__dirname);\r\nlet cwd = process.cwd();\r\n\r\nconsole.log(`The current working directory is: ${cwd}`);\r\nconsole.log('Reading Config file...');\r\n\r\n\r\n/* ToDo: enter manual data */\r\n\r\nlet cfg = Config.Create().then(cfg => {\r\n    console.log(cfg);\r\n    process.exit(0);\r\n});"],"sourceRoot":"/source/"}