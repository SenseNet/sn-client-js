{"version":3,"sources":["bin/sn-fetch-types.ts"],"names":[],"mappings":"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","file":"bin/sn-fetch-types.js","sourcesContent":["import * as Path from 'path';\r\nimport * as Prompt from 'prompt';\r\nimport * as FileSystem from 'fs';\r\nimport * as Http from 'http';\r\nimport * as File from 'fs';\r\nimport * as Stream from 'stream';\r\nimport * as AdmZip from 'adm-zip';\r\n\r\nclass SnConfig {\r\n    RepositoryUrl: string;\r\n    UserName?: string;\r\n    Password?: string;\r\n}\r\n\r\nconst SN_REPOSITORY_URL_POSTFIX = '/Root/System/Schema/Metadata/TypeScript/meta.zip'\r\nconst SN_CONFIG_NAME = 'sn.config.js';\r\nconst SN_TEMPDIR_NAME = 'sntmp';\r\n\r\nclass Config {\r\n\r\n    private static async ReadConfigFile(): Promise<SnConfig> {\r\n        let cfg: SnConfig;\r\n\r\n        try {\r\n            cfg = require(cwd + Path.sep + SN_CONFIG_NAME);\r\n        } catch (error) {\r\n            console.log(`No '${SN_CONFIG_NAME}' file found in the project root.`);\r\n            cfg = new SnConfig();\r\n        }\r\n        return cfg;\r\n    }\r\n\r\n    private static async Ask(question: string, hide: boolean = false): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            Prompt.start();\r\n            Prompt.get([\r\n                {\r\n                    name: question,\r\n                    required: true,\r\n                    hidden: hide\r\n                }\r\n            ], (err, res) => {\r\n                resolve(res[question]);\r\n            })\r\n        });\r\n    }\r\n\r\n    public static async Create(): Promise<SnConfig> {\r\n        let cfg = await this.ReadConfigFile();\r\n        if (!cfg.RepositoryUrl) {\r\n            cfg.RepositoryUrl = await this.Ask('Please enter your Sense/Net Site URL(e.g.: http://www.my-awesome-sensenet-portal.net/');\r\n        }\r\n        if (!cfg.UserName) {\r\n            cfg.UserName = await this.Ask('Please enter the admin username: ');\r\n        }\r\n        if (!cfg.Password) {\r\n            cfg.Password = await this.Ask('Please enter the admin password: ', true);\r\n        }\r\n\r\n        return cfg;\r\n    }\r\n}\r\n\r\nclass TypeDownloader {\r\n    public static async Fetch(cfg: SnConfig): Promise<Buffer> {\r\n        return new Promise<Buffer>((resolve, reject) => {\r\n            let filePath = `./${SN_TEMPDIR_NAME}/meta.zip`;\r\n            let auth = 'Basic ' + new Buffer(`${cfg.UserName}:${cfg.Password}`).toString('base64');\r\n            let headers = {\r\n                'Authorization': auth,\r\n            };\r\n            Http.get({\r\n                host: cfg.RepositoryUrl,\r\n                path: SN_REPOSITORY_URL_POSTFIX,\r\n                headers: headers,\r\n            }, (response: Http.IncomingMessage) => {\r\n\r\n                if (response.readable) {\r\n                    let data = [];\r\n                    let contentLength: number = parseInt(response.headers['content-length']);\r\n                    response.on('data', chunk => {\r\n                        data.push(chunk);\r\n                    })\r\n\r\n                    response.on('end', () => {\r\n                        let pos = 0;\r\n                        let buffer = new Buffer(contentLength);\r\n                        data.forEach(chunk => {\r\n                            chunk.copy(buffer, pos);\r\n                            pos += chunk.length;\r\n                        });\r\n                        resolve(buffer);\r\n                    });\r\n                }\r\n                else {\r\n                    reject();\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconsole.log('Sn-Fetch-Types starting...');\r\n\r\nlet path = Path.parse(__dirname);\r\nlet cwd = process.cwd();\r\n\r\nconsole.log(`The current working directory is: ${cwd}`);\r\nconsole.log('Reading Config file...');\r\n\r\nlet cfg = Config.Create().then(async cfg => {\r\n    let zipBuffer = await TypeDownloader.Fetch(cfg);\r\n\r\n    let zip = new AdmZip(zipBuffer);\r\n\r\n    process.exit(0);\r\n});"],"sourceRoot":"/source/"}