{"version":3,"sources":["src/FieldSettings.ts"],"names":[],"mappings":"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","file":"src/FieldSettings.js","sourcesContent":["import { Fields } from './Fields';\r\n\r\n\r\n/**\r\n * Module for FieldSettings.\r\n *\r\n * FieldSetting object is the implementation of the configuration element in a Sense/Net Content Type Definition.\r\n * The FieldSetting of a Field contains properties that define the behavior of the Field - for example a Field can be configured as read only or compulsory to fill.\r\n * FieldSettings helps us to autogenerate type and schema TS files from Sense/Net CTDs and use these files to reach all the configuration options of the Content Types fields on\r\n * client-side e.g. for validation.\r\n *\r\n * This module also contains some FieldSetting related enums to use them as types in properties e.g. visibitily or datetime mode options.\r\n */\r\nexport module FieldSettings {\r\n\r\n    /**\r\n     * Enum for Field visibility values.\r\n     */\r\n    export enum FieldVisibility { Show, Hide, Advanced }\r\n    /**\r\n     * Enum for Field output method values.\r\n     */\r\n    export enum OutputMethod { Default, Raw, Text, Html }\r\n    /**\r\n     * Enum for Choice Field control values.\r\n     */\r\n    export enum DisplayChoice { DropDown, RadioButtons, CheckBoxes }\r\n    /**\r\n     * Enum for DateTime Field mode values.\r\n     */\r\n    export enum DateTimeMode { None, Date, DateAndTime }\r\n    /**\r\n     * Enum for DateTime Field precision values.\r\n     */\r\n    export enum DateTimePrecision { Millisecond, Second, Minute, Hour, Day }\r\n\r\n    export class FieldSetting {\r\n        Name: string = 'Content';\r\n        DisplayName?: string;\r\n        Description?: string;\r\n        Icon?: string;\r\n        ReadOnly?: boolean;\r\n        Compulsory?: boolean;\r\n        DefaultValue?: string;\r\n        OutputMethod?: OutputMethod;\r\n        VisibleBrowse?: FieldVisibility;\r\n        VisibleNew?: FieldVisibility;\r\n        VisibleEdit?: FieldVisibility;\r\n        FieldIndex?: number;\r\n\r\n        constructor(options: IFieldSettingOptions) {\r\n            this.Name = options.name;\r\n            this.DisplayName = options.displayName;\r\n            this.Icon = options.icon;\r\n            this.ReadOnly = options.readOnly;\r\n            this.Compulsory = options.compulsory;\r\n            this.DefaultValue = options.defaultValue;\r\n            this.OutputMethod = options.outputMethod;\r\n            this.VisibleBrowse = options.visibleBrowse;\r\n            this.VisibleEdit = options.visibleEdit;\r\n            this.VisibleNew = options.visibleNew;\r\n            this.FieldIndex = options.fieldIndex;\r\n        }\r\n    }\r\n\r\n    export interface IFieldSettingOptions {\r\n        name?: string;\r\n        displayName?: string;\r\n        description?: string;\r\n        icon?: string;\r\n        readOnly?: boolean;\r\n        compulsory?: boolean;\r\n        defaultValue?: string;\r\n        outputMethod?: OutputMethod;\r\n        visibleBrowse?: FieldVisibility;\r\n        visibleNew?: FieldVisibility;\r\n        visibleEdit?: FieldVisibility;\r\n        fieldIndex?: number;\r\n    }\r\n\r\n    export class TextFieldSetting extends FieldSetting {\r\n        MinLength: number;\r\n        MaxLength: number;\r\n\r\n        constructor(options: ITextFieldSettingOptions) {\r\n            super(options);\r\n\r\n            this.MinLength = options.minLength;\r\n            this.MaxLength = options.maxLength;\r\n        }\r\n    }\r\n\r\n    export interface ITextFieldSettingOptions extends IFieldSettingOptions {\r\n        minLength?: number;\r\n        maxLength?: number;\r\n    }\r\n\r\n    export class ShortTextFieldSetting extends TextFieldSetting {\r\n        Regex: string;\r\n\r\n        constructor(options: IShortTextFieldSettingOptions) {\r\n            super(options);\r\n\r\n            this.Regex = options.regex;\r\n        }\r\n    }\r\n\r\n    export interface IShortTextFieldSettingOptions extends ITextFieldSettingOptions {\r\n        regex?: string;\r\n    }\r\n\r\n    export class NumberFieldSetting extends FieldSetting {\r\n        MinValue: number;\r\n        MaxValue: number;\r\n        Digits: number;\r\n        ShowAsPercentage: boolean;\r\n        Step: number;\r\n\r\n        constructor(options: INumberFieldSettingOptions) {\r\n            super(options);\r\n            this.MinValue = options.minValue;\r\n            this.MaxValue = options.maxValue;\r\n            this.Digits = options.digits;\r\n            this.ShowAsPercentage = options.showAsPercentage;\r\n            this.Step = options.step;\r\n        }\r\n    }\r\n\r\n    export interface INumberFieldSettingOptions extends IFieldSettingOptions {\r\n        minValue?: number;\r\n        maxValue?: number;\r\n        digits?: number;\r\n        showAsPercentage?: boolean;\r\n        step?: number;\r\n    }\r\n\r\n    export class BinaryFieldSetting extends FieldSetting {\r\n        IsText: boolean;\r\n\r\n        constructor(options: IBinaryFieldSettingOptions) {\r\n            super(options);\r\n\r\n            this.IsText = options.isText;\r\n        }\r\n    }\r\n\r\n    export interface IBinaryFieldSettingOptions extends IFieldSettingOptions {\r\n        isText?: boolean;\r\n    }\r\n\r\n    export class BooleanFieldSetting extends FieldSetting { }\r\n\r\n    export interface IBooleanFieldSettingOptions extends IFieldSettingOptions { }\r\n\r\n    export class ChoiceFieldSetting extends ShortTextFieldSetting {\r\n        AllowExtraValue: boolean;\r\n        AllowMultiple: boolean;\r\n        DisplayChoice: DisplayChoice;\r\n        Options: Fields.ChoiceOption[];\r\n\r\n        constructor(options: IChoiceFieldSettingOptions) {\r\n            super(options);\r\n            this.AllowExtraValue = options.allowExtraValue;\r\n            this.AllowMultiple = options.allowMultiple;\r\n            this.DisplayChoice = options.displayChoice;\r\n            this.Options = options.options;\r\n        }\r\n    }\r\n    \r\n    export interface IChoiceFieldSettingOptions extends IShortTextFieldSettingOptions {\r\n        allowExtraValue?: boolean;\r\n        allowMultiple?: boolean;\r\n        displayChoice?: DisplayChoice;\r\n        options: Fields.ChoiceOption[];\r\n    }\r\n\r\n    export class ColorFieldSetting extends TextFieldSetting {\r\n        Palette: string;\r\n\r\n        constructor(options: IColorFieldSettingOption) {\r\n            super(options);\r\n            this.Palette = options.palette;\r\n        }\r\n    }\r\n\r\n    interface IColorFieldSettingOption extends ITextFieldSettingOptions {\r\n        palette?: string;\r\n    }\r\n\r\n    export class CurrencyFieldSetting extends NumberFieldSetting {\r\n        Format: string;\r\n\r\n        constructor(options: ICurrencyFieldSettingOptions) {\r\n            super(options);\r\n\r\n            this.Format = options.format;\r\n        }\r\n    }\r\n\r\n    interface ICurrencyFieldSettingOptions extends INumberFieldSettingOptions {\r\n        format?: string;\r\n    }\r\n\r\n    export class DateTimeFieldSetting extends FieldSetting {\r\n        DateTimeMode: DateTimeMode;\r\n        Precision: DateTimePrecision;\r\n\r\n        constructor(options: IDateTimeFieldSettingOptions) {\r\n            super(options);\r\n            this.DateTimeMode = options.dateTimeMode;\r\n            this.Precision = options.precision;\r\n        }\r\n    }\r\n\r\n    interface IDateTimeFieldSettingOptions extends IFieldSettingOptions {\r\n        dateTimeMode?: DateTimeMode;\r\n        precision?: DateTimePrecision;\r\n    }\r\n\r\n    export class HyperLinkFieldSetting extends FieldSetting {\r\n        Format: string;\r\n\r\n        constructor(options: IHyperLinkFieldSettingOptions) {\r\n            super(options);\r\n            this.Format = options.format;\r\n        }\r\n    }\r\n\r\n    interface IHyperLinkFieldSettingOptions extends IFieldSettingOptions {\r\n        format?: string;\r\n    }\r\n\r\n    export class IntegerFieldSetting extends FieldSetting {\r\n        MinValue: number;\r\n        MaxValue: number;\r\n        ShowAsPercentage: boolean;\r\n        Step: number;\r\n\r\n        constructor(options: IIntegerFieldSettingOptions) {\r\n            super(options);\r\n            this.MinValue = options.minValue;\r\n            this.MaxValue = options.maxValue;\r\n            this.ShowAsPercentage = options.showAsPercentage;\r\n            this.Step = options.step;\r\n        }\r\n    }\r\n\r\n    export interface IIntegerFieldSettingOptions extends IFieldSettingOptions {\r\n        minValue?: number;\r\n        maxValue?: number;\r\n        showAsPercentage?: boolean;\r\n        step?: number;\r\n    }\r\n\r\n    export class LongTextFieldSetting extends TextFieldSetting {\r\n        Rows: number;\r\n        TextType: TextType;\r\n\r\n        constructor(options: ILongtTextFieldSettingOptions) {\r\n            super(options);\r\n\r\n            this.Rows = options.rows;\r\n            this.TextType = options.textType;\r\n        }\r\n    }\r\n\r\n    interface ILongtTextFieldSettingOptions extends ITextFieldSettingOptions {\r\n        rows?: number;\r\n        textType?: TextType;\r\n    }\r\n\r\n    enum TextType {\r\n        LongText, RichText, AdvancedRichText\r\n    }\r\n\r\n    export class PasswordFieldSetting extends ShortTextFieldSetting {\r\n        constructor(options: IPasswordFieldSettingOptions) {\r\n            super(options);\r\n        }\r\n    }\r\n\r\n    interface IPasswordFieldSettingOptions extends IShortTextFieldSettingOptions { }\r\n\r\n    export class ReferenceFieldSetting extends FieldSetting {\r\n        AllowMultiple: boolean;\r\n        AllowedTypes: string[];\r\n        SelectionRoots: string[];\r\n        Query: string;\r\n        FieldName: string;\r\n\r\n        constructor(options: IReferenceFieldSettingOptions) {\r\n            super(options);\r\n            this.AllowMultiple = options.allowMultiple;\r\n            this.AllowedTypes = options.allowedTypes;\r\n            this.SelectionRoots = options.selectionRoots;\r\n            this.Query = options.query;\r\n            this.FieldName = options.fieldName;\r\n        }\r\n    }\r\n\r\n    interface IReferenceFieldSettingOptions extends IFieldSettingOptions {\r\n        allowMultiple?: boolean;\r\n        allowedTypes?: string[];\r\n        selectionRoots?: string[];\r\n        query?: string;\r\n        fieldName?: string;\r\n    }\r\n}"],"sourceRoot":"/source/"}