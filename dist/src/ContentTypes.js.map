{"version":3,"sources":["src/ContentTypes.ts"],"names":[],"mappings":";AAEA,0BAAyC,WAAW,CAAC,CAAA;AAYrD,IAAc,YAAY,CA0IzB;AA1ID,WAAc,YAAY,EAAC,CAAC;IAMxB,6BAAoC,iBAAO;QA0BvC,YAAY,OAA+B;YACvC,MAAM,OAAO,CAAC,CAAC;YA1BnB,aAAQ,GAAY,IAAI,CAAC;YACzB,YAAO,GAAY,IAAI,CAAC;YACxB,UAAK,GAA2B,IAAI,CAAC;YACrC,cAAS,GAAY,IAAI,CAAC;YAC1B,WAAM,GAAY,IAAI,CAAC;YACvB,SAAI,GAAY,IAAI,CAAC;YACrB,gBAAW,GAAY,IAAI,CAAC;YAC5B,iBAAY,GAAY,IAAI,CAAC;YAC7B,YAAO,GAAY,IAAI,CAAC;YACxB,SAAI,GAAY,IAAI,CAAC;YACrB,UAAK,GAAY,IAAI,CAAC;YACtB,WAAM,GAAY,IAAI,CAAC;YACvB,aAAQ,GAAY,IAAI,CAAC;YACzB,oBAAe,GAAa,KAAK,CAAC;YAClC,aAAQ,GAAa,KAAK,CAAC;YAC3B,WAAM,GAAa,IAAI,CAAC;YACxB,mBAAc,GAAa,KAAK,CAAC;YACjC,cAAS,GAAU,IAAI,CAAC;YACxB,cAAS,GAAU,IAAI,CAAC;YACxB,sBAAiB,GAA2B,IAAI,CAAA;QAQhD,CAAC;IAEL,CAAC;IA9BY,2BAAc,iBA8B1B,CAAA;IAqCD,qBAA4B,cAAc;IAC1C,CAAC;IADY,mBAAM,SAClB,CAAA;IAED,uBAA8B,cAAc;IAAC,CAAC;IAAjC,qBAAQ,WAAyB,CAAA;IAE9C,yBAAgC,QAAQ;QAGpC,YAAY,OAA2B;YACnC,MAAM,OAAO,CAAC,CAAC;QACnB,CAAC;IACL,CAAC;IANY,uBAAU,aAMtB,CAAA;IAOD,sBAA6B,UAAU;QAOnC,YAAY,OAAwB;YAChC,MAAM,OAAO,CAAC,CAAC;QACnB,CAAC;IACL,CAAC;IAVY,oBAAO,UAUnB,CAAA;IAWD,mBAA0B,QAAQ;QAU9B,YAAY,OAAqB;YAC7B,MAAM,OAAO,CAAC,CAAC;QACnB,CAAC;IACL,CAAC;IAbY,iBAAI,OAahB,CAAA;AAaL,CAAC,EA1Ia,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QA0IzB;AAaD,uBAAiC,IAAY,EAAE,OAAO,GAAoB,EAAE;IACxE,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,CAAC,OAAO,CAAC;AACnB,CAAC;AAHe,qBAAa,gBAG5B,CAAA;AAED,IAAK,QAAW;AAAhB,WAAK,QAAQ;AAAE,CAAC,EAAX,QAAQ,KAAR,QAAQ,QAAG;AAChB,IAAK,MAAS;AAAd,WAAK,MAAM;AAAE,CAAC,EAAT,MAAM,KAAN,MAAM,QAAG","file":"src/ContentTypes.js","sourcesContent":["import { FieldSettings } from './FieldSettings';\r\nimport { Fields } from './Fields';\r\nimport { Content, IContentOptions } from './Content';\r\n\r\n/**\r\n * The Content Repository contains many different types of ```Content```. ```Content``` vary in structure and even in function. Different types of content contain different fields,\r\n * are displayed with different views, and may also implement different business logic. The fields, views and business logic of a content is defined by its type - the Content Type.\r\n *\r\n * Content Types are defined in a type hierarchy: a Content Type may be inherited from another Content Type - thus automatically inheriting its fields.\r\n *\r\n * This module represents the above mentioned type hierarchy by Typescript classes with the Content Types' Fields as properties. With Typescript classes we can derive types from another\r\n * inheriting its properties just like Content Types in the Content Repository. This module provides us to create an objects with a type so that we can validate on its properties by their\r\n * types or check the required ones.\r\n */\r\nexport module ContentTypes {\r\n    /**\r\n     * Class representing a GenericContent\r\n     * @class GenericContent\r\n     * @extends {@link Content}\r\n     */\r\n    export class GenericContent extends Content {\r\n        ParentId?: number = null;\r\n        OwnerId?: number = null;\r\n        Owner?: Fields.DeferredObject = null;\r\n        VersionId?: number = null;\r\n        TypeIs?: string = null;\r\n        Icon?: string = null;\r\n        CreatedById?: number = null;\r\n        ModifiedById?: number = null;\r\n        Version?: string = null;\r\n        Path?: string = null;\r\n        Depth?: number = null;\r\n        InTree?: string = null;\r\n        InFolder?: string = null;\r\n        IsSystemContent?: boolean = false;\r\n        IsFolder?: boolean = false;\r\n        Hidden?: boolean = null;\r\n        EnableLifespan?: boolean = false;\r\n        ValidFrom?: Date = null;\r\n        ValidTill?: Date = null;\r\n        AllowedChildTypes?: Fields.DeferredObject = null\r\n\r\n        /**\r\n         * @constructs GenericContent\r\n         * @param options {object} An object implementing {@link IGenericContentOptions} interface;\r\n         */\r\n        constructor(options: IGenericContentOptions) {\r\n            super(options);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * Interface for classes that represent a GenericContent.\r\n    *\r\n    * @interface IGenericContentOptions\r\n    * @extends {@link IContentOptions}\r\n    */\r\n\r\n    interface IGenericContentOptions extends IContentOptions {\r\n        ParentId?: number;\r\n        OwnerId?: number;\r\n        Owner?: Fields.DeferredObject;\r\n        VersionId?: number;\r\n        Type?: string;\r\n        TypeIs?: string;\r\n        Icon?: string;\r\n        CreatedById?: number;\r\n        ModifiedById?: number;\r\n        Version?: string;\r\n        Path?: string;\r\n        Depth?: number;\r\n        InTree?: string;\r\n        InFolder?: string;\r\n        IsSystemContent?: boolean;\r\n        IsFolder?: boolean;\r\n        Hidden?: boolean;\r\n        EnableLifespan?: boolean;\r\n        ValidFrom?: string;\r\n        ValidTill?: string;\r\n        AllowedChildTypes?: Fields.DeferredObject;\r\n    }\r\n    /**\r\n     * Class representing a Folder\r\n     * @class Folder\r\n     * @extends {@link GenericContent}\r\n     */\r\n    export class Folder extends GenericContent {\r\n    }\r\n\r\n    export class ListItem extends GenericContent{}\r\n\r\n    export class WebContent extends ListItem{\r\n        ReviewDate?: Date;\r\n        ArchiveDate?: Date;\r\n        constructor(options: IWebContentOptions){\r\n            super(options);\r\n        }\r\n    }\r\n\r\n    interface IWebContentOptions extends IGenericContentOptions {\r\n        ReviewDate?: Date;\r\n        ArchiveDate?: Date;\r\n    }\r\n\r\n    export class Article extends WebContent {\r\n        Subtitle?: string;\r\n        Lead?: string;\r\n        Body?: string;\r\n        Pinned?: boolean;\r\n        Keywords?: string;\r\n        Author?: string;\r\n        constructor(options: IArticleOptions){\r\n            super(options);\r\n        }\r\n    }\r\n\r\n    interface IArticleOptions extends IWebContentOptions {\r\n        Subtitle?: string;\r\n        Lead?: string;\r\n        Body?: string;\r\n        Pinned?: boolean;\r\n        Keywords?: string;\r\n        Author?: string;\r\n    }\r\n\r\n    export class Task extends ListItem {\r\n        StartDate?: Date;\r\n        DueDate?: Date;\r\n        AssignedTo?: string;\r\n        Priority?: Priority;\r\n        Status?: Status;\r\n        TaskCompletion?: number;\r\n        RemainingDays?: number;\r\n        DueText?: string;\r\n        DueCssClass?: string;\r\n        constructor(options: ITaskOptions){\r\n            super(options);\r\n        }\r\n    }\r\n\r\n    interface ITaskOptions extends IGenericContentOptions {\r\n        StartDate?: Date;\r\n        DueDate?: Date;\r\n        AssignedTo?: string;\r\n        Priority?: Priority;\r\n        Status?: Status;\r\n        TaskCompletion?: number;\r\n        RemainingDays?: number;\r\n        DueText?: string;\r\n        DueCssClass?: string;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n     * Creates a Content object by the given type and options Object that hold the field values.\r\n     * @param type {string} The Content will be a copy of the given type.\r\n     * @param options {SenseNet.IContentOptions} Optional list of fields and values.\r\n     * @returns {SenseNet.Content}\r\n     * ```ts\r\n     * var content = SenseNet.Content.Create('Folder', { DisplayName: 'My folder' }); // content is an instance of the Folder with the DisplayName 'My folder'\r\n     * ```\r\n     */\r\nexport function CreateContent<T>(type: string, options: IContentOptions = {}): Content {\r\n    let content = new ContentTypes[type](options);\r\n    return content;\r\n}\r\n\r\nenum Priority {}\r\nenum Status {}"],"sourceRoot":"/source/"}