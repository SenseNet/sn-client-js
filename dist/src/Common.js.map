{"version":3,"sources":["src/Common.ts"],"names":[],"mappings":";AACA,2BAAyB,YAAY,CAAC,CAAA;AAqBzB,aAAK,GAAG,CAAC,QAAgB,EAAE,QAAgB;IACpD,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;IAClJ,MAAM,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAG,UAAU,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC1G,CAAC,CAAA;AAeY,cAAM,GAAG;IAClB,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IACzG,MAAM,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC/C,CAAC,CAAA;AAgBY,sBAAc,GAAG;IAC1B,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACnG,MAAM,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC/C,CAAC,CAAA;AAeY,0BAAkB,GAAG;IAC9B,IAAI,MAAM,GAAG,IAAI,mBAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACvG,MAAM,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC/C,CAAC,CAAA;AAEY,kBAAU,GAAG,CAAC,GAAG,GAAW,GAAG;IACxC,MAAM,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;AAC5B,CAAC,CAAA","file":"src/Common.js","sourcesContent":["import { Observable } from '@reactivex/rxjs';\r\nimport { ODataApi } from './ODataApi';\r\n/**\r\n * It is possible to send authentication requests using this action. You provide the username and password and will get the User object as the response if the login operation was \r\n * successful or HTTP 403 Forbidden message if it wasnâ€™t. If the username does not contain a domain prefix, the configured default domain will be used. After you logged in the user successfully, \r\n * you will receive a standard ASP.NET auth cookie which will make sure that your subsequent requests will be authorized correctly.\r\n * \r\n * As the username and password is sent in clear text, always send these kinds of requests throuigh HTTPS.\r\n * @params username {string} Name of the user.\r\n * @params password {string} Password of the user.\r\n * @returns {Observable} Returns an RxJS observable that you can subscribe of in your code.\r\n * ```\r\n * let userLogin = Login('alba', 'alba');\r\n * userLogin.subscribe({\r\n *  next: response => {\r\n *      console.log('success');\r\n *  },\r\n *  error: error => console.error('something wrong occurred: ' + error.responseJSON.error.message.value),\r\n *  complete: () => console.log('done'),\r\n * });\r\n * ```\r\n */\r\nexport const Login = (username: string, password: string): Observable<any> => {\r\n    let action = new ODataApi.CustomAction({ name: 'Login', path: '/Root', noCache: true, isAction: true, requiredParams: ['username', 'password'] });\r\n    return ODataApi.CreateCustomAction(action, { data: { 'username': username , 'password': password } });\r\n}\r\n/**\r\n * Similarly to the Login action above, you can send a logout action to the portal.\r\n * @returns {Observable} Returns an RxJS observable that you can subscribe of in your code.\r\n * ```\r\n * let userLogout = Logout();\r\n * userLogout.subscribe({\r\n *  next: response => {\r\n *      console.log('success');\r\n *  },\r\n *  error: error => console.error('something wrong occurred: ' + error.responseJSON.error.message.value),\r\n *  complete: () => console.log('done'),\r\n * });\r\n * ```\r\n */\r\nexport const Logout = (): Observable<any> => {\r\n    let action = new ODataApi.CustomAction({ name: 'Logout', noCache: true, path: '/Root', isAction: true });\r\n    return ODataApi.CreateCustomAction(action);\r\n}\r\n/**\r\n * Gets the complete version information about the core product and the installed applications. This function is accessible only for administrators by default. You can learn more about the \r\n * subject in the SnAdmin article. You can read detailed description of the function result.\r\n * @returns {Observable} Returns an RxJS observable that you can subscribe of in your code.\r\n * ```\r\n * let getVersionInfo = GetVersionInfo();\r\n * getVersionInfo.subscribe({\r\n *  next: response => {\r\n *      console.log('success');\r\n *  },\r\n *  error: error => console.error('something wrong occurred: ' + error.responseJSON.error.message.value),\r\n *  complete: () => console.log('done'),\r\n * });\r\n * ```\r\n */\r\nexport const GetVersionInfo = (): Observable<any> => {\r\n    let action = new ODataApi.CustomAction({ name: 'GetVersionInfo', path: '/Root', isAction: false });\r\n    return ODataApi.CreateCustomAction(action);\r\n}\r\n/**\r\n * Returns the list of all ContentTypes in the system.\r\n * @returns {Observable} Returns an RxJS observable that you can subscribe of in your code.\r\n * ```\r\n * let getAllContentTypes = GetAllContentTypes();\r\n * getAllContentTypes.subscribe({\r\n *  next: response => {\r\n *      console.log('success');\r\n *  },\r\n *  error: error => console.error('something wrong occurred: ' + error.responseJSON.error.message.value),\r\n *  complete: () => console.log('done'),\r\n * });\r\n * ```\r\n */\r\nexport const GetAllContentTypes = (): Observable<any> => {\r\n    let action = new ODataApi.CustomAction({ name: 'GetAllContentTypes', path: '/Root', isAction: false });\r\n    return ODataApi.CreateCustomAction(action);\r\n}\r\n\r\nexport const SetSiteUrl = (url: string = '/') => {\r\n    window['siteUrl'] = url;\r\n}"],"sourceRoot":"/source/"}