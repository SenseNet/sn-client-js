{"version":3,"sources":["src/ODataApi.ts"],"names":[],"mappings":"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","file":"src/ODataApi.js","sourcesContent":["import { ODataHelper } from './ODataHelper';\r\nimport { Content } from './Content';\r\nimport 'isomorphic-fetch';\r\nimport * as Rx from '@reactivex/rxjs';\r\nimport { Value, Properties } from 'ts-json-properties';\r\n\r\n/**\r\n * This module contains methods and classes for sending requests and getting responses from the Content Repository through OData REST API. \r\n * \r\n * Following methods return Rxjs Observables which are made from the ajax requests' promises. Action methods like Delete or Rename on Content calls this methods,\r\n * gets their responses as Observables and returns them so that you can subscribe them in your code.\r\n */\r\nexport module ODataApi {\r\n    export const ROOT_URL = () => {\r\n        let a = '/';\r\n        if (typeof window !== 'undefined' && typeof window['siteUrl'] !== 'undefined') {\r\n            return `${window['siteUrl']}/OData.svc`;\r\n        }\r\n        else {\r\n            return '/OData.svc'\r\n        }\r\n    };\r\n    /**\r\n     * Method to get a Content from the Content Repository through OData REST API.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params options {ODataRequestOptions} Object with the params of the ajax request.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export let GetContent = (options: ODataRequestOptions) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(`${ROOT_URL()}${options.path}${ODataHelper.buildUrlParamString(options.params)}`);\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    /**\r\n     * Method to fetch children of a Content from the Content Repository through OData REST API.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params options {ODataRequestOptions} Object with the params of the ajax request.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const FetchContent = (options: ODataRequestOptions) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(`${ROOT_URL()}${options.path}${ODataHelper.buildUrlParamString(options.params)}`);\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    export const CreateContent = (path: string, content: Content) => {\r\n        let contentItem = { __contentType: content.Type };\r\n        for (let prop in content) {\r\n            if (prop !== 'Type') {\r\n                contentItem[prop] = content[prop];\r\n            }\r\n        }\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(`${ROOT_URL()}${path}`, ODataHelper.buildRequestBody(contentItem));\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    /**\r\n     * Method to delete a Content from the Content Repository through OData REST API.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params id {number} Id of the Content that will be deleted.\r\n     * @params permanent {boolean} Determines whether the Content should be moved to the Trash or be deleted permanently.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const DeleteContent = (id: number, permanent: boolean) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(\r\n            `${ROOT_URL()}${ODataHelper.getContentUrlbyId(id)}/Delete`,\r\n            JSON.stringify({ permanent: permanent })\r\n        );\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    /**\r\n     * Method to modify a single or multiple fields of a Content through OData REST API.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params id {number} Id of the Content that will be modified.\r\n     * @params fields {Object} Contains the modifiable fieldnames as keys and their values.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const PatchContent = (id: number, fields: Object) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(\r\n            `${ROOT_URL()}${ODataHelper.getContentUrlbyId(id)}`,\r\n            {\r\n                method: 'PATCH',\r\n                body: `models=[${JSON.stringify(fields)}]`\r\n            }\r\n        );\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    /**\r\n     * Method to set multiple fields of a Content and clear the rest through OData REST API.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params id {number} Id of the Content that will be modified.\r\n     * @params fields {Object} Contains the modifiable fieldnames as keys and their values.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const PutContent = (id: number, fields: Object) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(\r\n            `${ROOT_URL()}${ODataHelper.getContentUrlbyId(id)}`,\r\n            {\r\n                method: 'PUT',\r\n                body: `models=[${JSON.stringify(fields)}]`\r\n            }\r\n        );\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    /**\r\n     * Creates a wrapper function for a callable custom OData action.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params action {CustomAction} A CustomAction configuration object.\r\n     * @params options {IODataParams} An object that holds the config of the ajax request like urlparameters or data.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const CreateCustomAction = (action: CustomAction, options?: IODataParams) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any>;\r\n        let cacheParam = (action.noCache) ? '' : '&nocache=' + new Date().getTime();\r\n        let path = '';\r\n        if (typeof action.id !== 'undefined') {\r\n            path = `${ODataHelper.getContentUrlbyId(action.id)}/${action.name}`;\r\n        }\r\n        else {\r\n            path = `${ODataHelper.getContentURLbyPath(action.path)}/${action.name}`;\r\n        }\r\n        if (cacheParam.length > 0) {\r\n            path = `${path}?${cacheParam}`\r\n        }\r\n        else {\r\n            path = path;\r\n        }\r\n        if (typeof options !== 'undefined' && typeof options.data !== 'undefined') {\r\n            for (let option in options.data) {\r\n                action.params[option] = options.data[option];\r\n            }\r\n        }\r\n\r\n        let body = action.params.length > 0 ? JSON.stringify(options.data) : '';\r\n\r\n        if (typeof action.isAction === 'undefined' || !action.isAction) {\r\n            promise = fetch(`${ROOT_URL()}${path}${ODataHelper.buildUrlParamString(action.params)}`);\r\n        }\r\n        else {\r\n            promise =\r\n                fetch(`${ROOT_URL()}${path}`, {\r\n                    method: 'POST',\r\n                    body: body\r\n                });\r\n        }\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    export const Upload = (path: string, data: Object, creation: boolean) => {\r\n        let Observable = Rx.Observable;\r\n        let url = `${ROOT_URL()}${ODataHelper.getContentURLbyPath(path)}/Upload`;\r\n        if (creation) {\r\n            url = `${url}?create=1`;\r\n        }\r\n        else {\r\n            url = url;\r\n        }\r\n        let promise: Promise<any> = fetch(url, JSON.stringify(data));\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n\r\n    export class ODataRequestOptions {\r\n        path: string;\r\n        params: ODataParams[];\r\n        async: boolean;\r\n        type: string;\r\n        success: Function;\r\n        error: Function;\r\n        complete: Function;\r\n\r\n        constructor(options: IODataRequestOptions) {\r\n            this.params = options.params || [];\r\n            this.path = `${options.path}`;\r\n            this.async = options.async || true;\r\n            this.type = options.type || 'GET';\r\n            this.success = options.success;\r\n            this.error = options.error;\r\n            this.complete = options.complete;\r\n        }\r\n    }\r\n\r\n    export interface IODataRequestOptions {\r\n        path: string;\r\n        params?: ODataParams[];\r\n        async?: boolean;\r\n        type?: string;\r\n        success?: Function;\r\n        error?: Function;\r\n        complete?: Function;\r\n    }\r\n\r\n    /**\r\n     * Type of the OData option Object. Contains the possible OData params as properties.\r\n     */\r\n    export class ODataParams {\r\n        select: string | string[];\r\n        expand: string | string[] = null;\r\n        orderby: string | string[];\r\n        top: string;\r\n        skip: string;\r\n        filter: string;\r\n        format: string;\r\n        inlinecount: string;\r\n        query: string;\r\n        metadata: string;\r\n        data: Object;\r\n\r\n        constructor(options: IODataParams) {\r\n            this.select = options.select;\r\n            this.expand = options.expand;\r\n            this.orderby = options.orderby;\r\n            this.top = options.top;\r\n            this.skip = options.skip;\r\n            this.filter = options.filter;\r\n            this.format = options.filter;\r\n            this.inlinecount = options.inlinecount;\r\n            this.query = options.query;\r\n            this.metadata = options.metadata;\r\n            this.data = options.data || [];\r\n        }\r\n    }\r\n\r\n    export interface IODataParams {\r\n        select?: string | string[];\r\n        expand?: string | string[];\r\n        orderby?: string | string[];\r\n        top?: string;\r\n        skip?: string;\r\n        filter?: string;\r\n        format?: string;\r\n        inlinecount?: string;\r\n        query?: string;\r\n        metadata?: string;\r\n        data?: Object;\r\n    }\r\n\r\n    export class CustomAction {\r\n        name: string;\r\n        id: number;\r\n        path: string;\r\n        params: string[] = [];\r\n        requiredParams: string[] = [];\r\n        isAction: boolean = false;\r\n        noCache: boolean = false;\r\n        constructor(options: ICustomActionOptions) {\r\n            this.name = options.name;\r\n            this.id = options.id;\r\n            this.path = options.path;\r\n            this.isAction = options.isAction || false;\r\n            this.noCache = options.noCache || false;\r\n            if (options.params) {\r\n                for (let i = 0; i < options.params.length; i++) {\r\n                    this.params.push(options.params[i]);\r\n                }\r\n            }\r\n            if (options.requiredParams) {\r\n                for (let i = 0; i < options.requiredParams.length; i++) {\r\n                    this.params.push(options.requiredParams[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    interface ICustomActionOptions {\r\n        name: string;\r\n        id?: number;\r\n        path?: string;\r\n        params?: string[];\r\n        requiredParams?: string[];\r\n        isAction?: boolean;\r\n        noCache?: boolean;\r\n    }\r\n}"],"sourceRoot":"/source/"}