{"version":3,"sources":["src/ODataApiActionObservables.ts"],"names":[],"mappings":"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","file":"src/ODataApiActionObservables.js","sourcesContent":["import * as Rx from '@reactivex/rxjs';\r\nimport { ODataHelper } from './ODataHelper';\r\nimport { Content } from './Content';\r\nimport { ODataApi } from './ODataApi';\r\nimport 'isomorphic-fetch';\r\nconst { ajax } = Rx.Observable;\r\nimport {Value, Properties} from 'ts-json-properties';\r\n\r\n/**\r\n * This module contains methods for sending requests and getting responses from the Content Repository through OData REST API. \r\n * \r\n * Following methods return Rxjs ActionObservables which are made from the ajax requests' promises. \r\n */\r\n\r\n\r\nexport module ODataApiActionObservables {\r\n    const sensenetConfig = Properties.getValue('sensenet');\r\n    const config = Object.assign(sensenetConfig);\r\n    let ROOT_URL = '/';\r\n    if(typeof sensenetConfig !== 'undefined' && typeof sensenetConfig.url != 'undefined'){\r\n        ROOT_URL = config.url;\r\n    }\r\n    /**\r\n     * Method to get a Content from the Content Repository through OData REST API.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params options {ODataRequestOptions} Object with the params of the ajax request.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const GetContent = (options: ODataApi.ODataRequestOptions) => {\r\n        let Observable = Rx.Observable;\r\n        let promise: Promise<any> = fetch(`${options.path}${ODataHelper.buildUrlParamString(options.params)}`);\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n    /**\r\n     * Method to fetch children of a Content from the Content Repository through OData REST API.\r\n     * \r\n     * This method returns an ActionObservable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the ActionObservable.\r\n     * @params path {string} Path of the parent Content.\r\n     * @params params {string} A string with the neccessarry request url params.\r\n     * @returns {ActionObservable} Returns an ActionObservable.\r\n     */\r\n    export const FetchContent = (path: string, params: string) => ajax.getJSON(`${path}${params}`);\r\n    //TODO: id-val is menjen a create\r\n    /**\r\n     * Method to create a Content as a children of a given parent Content in the Content Repository through OData REST API.\r\n     * \r\n     * This method returns an ActionObservable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the ActionObservable.\r\n     * @params path {string} Path of the parent Content.\r\n     * @params content {Content} A Content object with the saveable fields as properties.\r\n     * @returns {ActionObservable} Returns an ActionObservable.\r\n     */\r\n    export const CreateContent = (path: string, content: Content) => ajax.post(`${path}`, 'models=[\" + JSON.stringify(content) + \"]');\r\n    /**\r\n     * Method to delete a Content from the Content Repository through OData REST API.\r\n     * \r\n     * This method returns an ActionObservable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the ActionObservable.\r\n     * @params id {number} Id of the Content.\r\n     * @params permanently {boolean} Defines whether the Content should be moved to the Trash or deleted permanently.\r\n     * @returns {ActionObservable} Returns an ActionObservable.\r\n     */\r\n    export const DeleteContent = (id: number, permanently: boolean) => ajax.post(`${ROOT_URL}/content(${id})/Delete`, JSON.stringify({ 'permanent': permanently }));\r\n\r\n    /**\r\n     * Method to modify a single or multiple fields of a Content through OData REST API.\r\n     * \r\n     * This method returns an ActionObservable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the ActionObservable.\r\n     * @params id {number} Id of the Content.\r\n     * @params fields {Object} An Object with the fieldsnames and values that must be saved.\r\n     * @returns {ActionObservable} Returns an ActionObservable.\r\n     */\r\n    export const PatchContent = (id: number, fields: Object) =>\r\n        ajax({\r\n            url: `${ROOT_URL}/content(${id})`,\r\n            method: 'PATCH',\r\n            responseType: 'json',\r\n            body: 'models=[\" + JSON.stringify(fields) + \"]'\r\n        })\r\n    /**\r\n     * Method to set multiple fields of a Content and clear the rest through OData REST API.\r\n     * \r\n     * This method returns an ActionObservable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the ActionObservable.\r\n     * @params id {number} Id of the Content.\r\n     * @params fields {Object} An Object with the fieldsnames and values that must be saved.\r\n     * @returns {ActionObservable} Returns an ActionObservable.\r\n     */\r\n    export const PutContent = (id: number, fields: Object) =>\r\n        ajax({\r\n            url: `${ROOT_URL}/content(${id})`,\r\n            method: 'PUT',\r\n            responseType: 'json',\r\n            body: 'models=[\" + JSON.stringify(fields) + \"]'\r\n        })\r\n    //TODO: custom action\r\n    /**\r\n     * Creates a wrapper function for a callable custom OData action.\r\n     * \r\n     * This method creates an Observable, sends an ajax request to the server and convert the reponse to promise which will be the argument of the Observable.\r\n     * @params action {CustomAction} A CustomAction configuration object.\r\n     * @params options {IODataParams} An object that holds the config of the ajax request like urlparameters or data.\r\n     * @returns {Observable} Returns an Rxjs observable that you can subscribe of in your code.\r\n     */\r\n    export const CreateCustomAction = (action: ODataApi.CustomAction, options?: ODataApi.IODataParams) => {\r\n        let cacheParam = (action.noCache) ? '' : '&nocache=' + new Date().getTime();\r\n        let path = '';\r\n        if (typeof action.id !== 'undefined') {\r\n            path = `${ROOT_URL}${ODataHelper.getContentUrlbyId(action.id)}/${action.name}`;\r\n        }\r\n        else {\r\n            path = `${ROOT_URL}${ODataHelper.getContentURLbyPath(action.path)}/${action.name}`;\r\n        }\r\n        if (cacheParam.length > 0) {\r\n            path = `${path}?${cacheParam}`\r\n        }\r\n\r\n        // for (let option in options.data) {\r\n        //     action.params[option] = options.data[option];\r\n        // }\r\n\r\n        let body = action.params.length > 0 ? JSON.stringify(options.data) : '';\r\n\r\n        if (typeof action.isAction === 'undefined' || !action.isAction) {\r\n            return ajax({\r\n                url: `${path}${ODataHelper.buildUrlParamString(action.params)}`,\r\n                method: 'GET',\r\n                responseType: 'json'\r\n            })\r\n        }\r\n        else {\r\n            if (typeof options !== 'undefined' && typeof options.data !== 'undefined') {\r\n                return ajax.post(`${path}`, JSON.stringify(options.data));\r\n            }\r\n            else {\r\n                return ajax.post(`${path}`);\r\n            }\r\n        }\r\n    }\r\n    export const Upload = (path: string, data: Object, creation: boolean) => {\r\n        let Observable = Rx.Observable;\r\n        let url = `${ODataHelper.getContentURLbyPath(path)}/Upload`;\r\n        if (creation) {\r\n            url = `${url}?create=1`;\r\n        }\r\n        let promise: Promise<any> = fetch(url, JSON.stringify(data));\r\n        let source = Observable.fromPromise(promise);\r\n        return source;\r\n    }\r\n}"],"sourceRoot":"/source/"}