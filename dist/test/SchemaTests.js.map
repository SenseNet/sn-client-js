{"version":3,"sources":["test/SchemaTests.ts"],"names":[],"mappings":";AACA,yBAAwB,eAAe,CAAC,CAAA;AACxC,gCAA8B,sBAAsB,CAAC,CAAA;AACrD,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,QAAQ,CAAC,SAAS,EAAE;IAChB,QAAQ,CAAC,SAAS,EAAE;QAChB,IAAI,MAAM,GAAG,IAAI,gBAAO,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;QACvD,EAAE,CAAC,+BAA+B,EAAE;YAChC,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,kBAAkB,CAAC;gBACjC,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,kBAAkB,CAAC;gBACjC,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,kBAAkB,CAAC;gBACjC,IAAI,EAAE,KAAK;gBACX,OAAO,EAAE,EAAE;aACd,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,oBAAoB,CAAC;gBACnC,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,qBAAqB,CAAC;gBACpC,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,iBAAiB,CAAC;gBAChC,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,6BAAa,CAAC,oBAAoB,CAAC;gBACnC,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAO,CAAC,MAAM,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,iBAAiB,EAAE;QACxB,MAAM,EAAE,GAAG,gBAAO,CAAC,iBAAiB,EAAE,CAAC;QACvC,EAAE,CAAC,+BAA+B,EAAE;YAChC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAO,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"test/SchemaTests.js","sourcesContent":["///<reference path=\"../node_modules/@types/mocha/index.d.ts\"/>\r\nimport { Schemas } from '../src/Schema';\r\nimport { FieldSettings } from '../src/FieldSettings';\r\nimport * as Chai from 'chai';\r\nimport * as sinon from 'sinon';\r\nconst expect = Chai.expect;\r\n\r\ndescribe('Schemas', () => {\r\n    describe('#Schema', function () {\r\n        let schema = new Schemas.Schema({ FieldSettings: [] });\r\n        it('should return a schema object', function () {\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.NumberFieldSetting({\r\n                    name: 'DisplayName'\r\n                }));\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.BinaryFieldSetting({\r\n                    name: 'DisplayName'\r\n                }));\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.ChoiceFieldSetting({\r\n                    name: 'aaa',\r\n                    options: []\r\n                }));\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.CurrencyFieldSetting({\r\n                    name: 'DisplayName'\r\n                }));\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.HyperLinkFieldSetting({\r\n                    name: 'DisplayName'\r\n                }));\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.ColorFieldSetting({\r\n                    name: 'DisplayName'\r\n                }));\r\n            schema.FieldSettings.push(\r\n                new FieldSettings.PasswordFieldSetting({\r\n                    name: 'DisplayName'\r\n                }));\r\n            expect(schema).to.be.an.instanceof(Schemas.Schema);\r\n        });\r\n    });\r\n    describe('#GenericContent', function () {\r\n        const gc = Schemas.GenericContentCTD();\r\n        it('should return a schema object', function () {\r\n            expect(gc).to.be.an.instanceof(Schemas.Schema);\r\n        });\r\n    });\r\n});"],"sourceRoot":"/source/"}