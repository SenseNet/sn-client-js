{"version":3,"sources":["test/ODataHelperTests.ts"],"names":[],"mappings":";;AACA,oDAAgD;AAChD,6BAA6B;AAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,QAAQ,CAAC,aAAa,EAAE;IACpB,QAAQ,CAAC,eAAe,EAAE;QACtB,EAAE,CAAC,2DAA2D,EAAE;YAC5D,MAAM,QAAQ,GAAG,yBAAW,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;YACjE,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,iEAAiE,EAAE;YAClE,MAAM,WAAW,GAAG,yBAAW,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YACzD,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,sBAAsB,EAAE;QAC7B,EAAE,CAAC,kDAAkD,EAAE;YACnD,MAAM,UAAU,GAAG,yBAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,aAAa,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,wBAAwB,EAAE;QAC/B,EAAE,CAAC,oDAAoD,EAAE;YACrD,MAAM,UAAU,GAAG,yBAAW,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;YACzE,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,6DAA6D,EAAE;YAC9D,MAAM,UAAU,GAAG,yBAAW,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,CAAC;YAC5E,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,yEAAyE,EAAE;YAC1E,IAAI,CAAC;gBACD,yBAAW,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACxC,CAAC;YACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAC/D,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH,QAAQ,CAAC,wBAAwB,EAAE;IAC/B,EAAE,CAAC,6DAA6D,EAAE;QAC9D,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,EAAE,CAAC;QACzD,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kFAAkF,EAAE;QACnF,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3E,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,8BAA8B,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,yEAAyE,EAAE;QAC1E,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;QAClF,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,0CAA0C,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0EAA0E,EAAE;QAC3E,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;QAC5F,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,+CAA+C,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kDAAkD,EAAE;QACnD,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;QACpH,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,oEAAoE,CAAC,CAAC;IAC1G,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kDAAkD,EAAE;QACnD,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAC9I,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,0FAA0F,CAAC,CAAC;IAChI,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6CAA6C,EAAE;QAC9C,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;QAClG,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,mCAAmC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0CAA0C,EAAE;QAC3C,MAAM,cAAc,GAAG,yBAAW,CAAC,mBAAmB,EAAE,CAAC;QACzD,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH,QAAQ,CAAC,mBAAmB,EAAE;IAC1B,EAAE,CAAC,0CAA0C,EAAE;QAC3C,MAAM,IAAI,GAAG,yBAAW,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAChF,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,8CAA8C,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"test/ODataHelperTests.js","sourcesContent":["///<reference path=\"../node_modules/@types/mocha/index.d.ts\"/>\r\nimport { ODataHelper } from '../src/ODataHelper'\r\nimport * as Chai from 'chai';\r\nconst expect = Chai.expect;\r\n\r\ndescribe('ODataHelper', () => {\r\n    describe('#IsItemPath()', function () {\r\n        it('should return true if the given path is a path of an item', function () {\r\n            const isAnItem = ODataHelper.isItemPath(\"/workspace('project')\");\r\n            expect(isAnItem).to.be.true;\r\n        });\r\n        it('should return false if the given path is a path of a collection', function () {\r\n            const isNotAnItem = ODataHelper.isItemPath(\"/workspace\");\r\n            expect(isNotAnItem).to.be.false;\r\n        });\r\n    });\r\n    describe('#getContentUrlbyId()', function () {\r\n        it('should return a proper item path by the given id', function () {\r\n            const contentUrl = ODataHelper.getContentUrlbyId(1);\r\n            expect(contentUrl).to.be.eq(\"/content(1)\")\r\n        });\r\n    });\r\n    describe('#getContentURLbyPath()', function () {\r\n        it('should return a proper item path by the given path', function () {\r\n            const contentUrl = ODataHelper.getContentURLbyPath('/workspace/project');\r\n            expect(contentUrl).to.be.eq(\"/workspace('project')\");\r\n        });\r\n        it('should return the path itself if it is an item path already', function () {\r\n            const contentUrl = ODataHelper.getContentURLbyPath(\"/workspace('project')\");\r\n            expect(contentUrl).to.be.eq(\"/workspace('project')\");\r\n        });\r\n        it('should return an error message if the given argument is an empty string', function () {\r\n            try {\r\n                ODataHelper.getContentURLbyPath(\"\");\r\n            }\r\n            catch (err) {\r\n                expect(err).to.eql(new Error('This is not a valid path.'));\r\n            }\r\n        });\r\n    });\r\n});\r\ndescribe('#buildUrlParamString()', function () {\r\n    it('should return an empty string, if the argument is undefined', function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString();\r\n        expect(urlParamString).to.be.eq('');\r\n    });\r\n    it(\"should return a string with only select Id and Type if there's no selected field\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString({ metadata: 'no' });\r\n        expect(urlParamString).to.be.eq('?metadata=no&$select=Id,Type');\r\n    });\r\n    it(\"should return a string with the given field and Id and Type as selected\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString({ select: 'DisplayName' });\r\n        expect(urlParamString).to.be.eq('?$select=DisplayName,Id,Type&metadata=no');\r\n    });\r\n    it(\"should return a string with the given fields and Id and Type as selected\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString({ select: ['DisplayName', 'Path'] });\r\n        expect(urlParamString).to.be.eq('?$select=DisplayName,Path,Id,Type&metadata=no');\r\n    });\r\n    it(\"should return a string with the given parameters\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString({ select: ['DisplayName', 'Path'], orderby: 'DisplayName' });\r\n        expect(urlParamString).to.be.eq('?$select=DisplayName,Path,Id,Type&$orderby=DisplayName&metadata=no');\r\n    });\r\n    it(\"should return a string with the given parameters\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString({ select: ['DisplayName', 'Path'], orderby: 'DisplayName', query: \"isOf('Article')\" });\r\n        expect(urlParamString).to.be.eq(\"?$select=DisplayName,Path,Id,Type&$orderby=DisplayName&query=isOf('Article')&metadata=no\");\r\n    });\r\n    it(\"should return a string without select param\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString({ select: 'all', orderby: 'DisplayName' });\r\n        expect(urlParamString).to.be.eq(\"?$orderby=DisplayName&metadata=no\");\r\n    });\r\n    it(\"should return a string without any param\", function () {\r\n        const urlParamString = ODataHelper.buildUrlParamString();\r\n        expect(urlParamString).to.be.eq(\"\");\r\n    });\r\n});\r\ndescribe('#buildRequestBody', function () {\r\n    it(\"should return a stringified request body\", function () {\r\n        const body = ODataHelper.buildRequestBody({ permanent: false, comment: 'aaa' });\r\n        expect(body).to.be.eq('models=[{\"permanent\":false,\"comment\":\"aaa\"}]');\r\n    });\r\n});"],"sourceRoot":"/source/"}